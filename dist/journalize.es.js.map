{"version":3,"file":"journalize.es.js","sources":["../node_modules/date-fns/is_date/index.js","../node_modules/date-fns/parse/index.js","../src/apmonth.js","../src/apdate.js","../src/utils.js","../src/apnumber.js","../src/lookup.js","../src/data/states.js","../src/apstate.js","../src/aptime.js","../src/intcomma.js","../src/intword.js","../src/ordinal.js","../src/postal.js"],"sourcesContent":["/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate (argument) {\n  return argument instanceof Date\n}\n\nmodule.exports = isDate\n","var isDate = require('../is_date/index.js')\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset()\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n","import parse from 'date-fns/parse';\n\n/**\n * Map of AP month abbreviations. Note that they are zero-indexed due to\n * JavaScript's life choices. Exported for testing purposes.\n *\n * @private\n * @type {object}\n */\nexport var AP_MONTHS = {\n  0: 'Jan.',\n  1: 'Feb.',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'Aug.',\n  8: 'Sept.',\n  9: 'Oct.',\n  10: 'Nov.',\n  11: 'Dec.'\n};\n\n/**\n * Returns an AP-formatted month string that corresponds with the supplied\n * Date, timestamp or date string. Relies on date-fns/parse to smooth over\n * browser ISO 8601 parsing inconsistencies. If an `input` is not passed, it\n * will use the result of `new Date();`.\n *\n * @param  {Date|Number|String} [input] JavaScript Date object, numerical\n * timestamp or ISO 8601 string, defaults to current date if not passed\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * // Remember that JavaScript zero-indexes months!\n * journalize.apmonth(new Date(2016, 10, 8));\n * // returns 'Nov.'\n *\n * // The string parser, however, isn't as silly\n * journalize.apmonth('2016-11-08');\n * // returns 'Nov.'\n *\n * // Accounts for the non-abbreviated months, too\n * journalize.apmonth('2016-06-04');\n * // returns 'July'\n *\n * // Uses the current date if no parameter is passed\n * journalize.apmonth();\n * // returns 'July' (pretend it is actually July)\n */\nexport default function apmonth(input) {\n  var date = parse(input || new Date());\n  return AP_MONTHS[date.getMonth()];\n}\n","import parse from 'date-fns/parse';\nimport apmonth from './apmonth';\n\n/**\n * Returns an AP-formatted date string that corresponds with the supplied\n * Date, timestamp or date string. Relies on date-fns/parse to smooth over\n * browser ISO 8601 parsing inconsistencies. If an `input` is not passed, it\n * will use the result of `new Date();`.\n *\n * @param  {Date|Number|String} [input] JavaScript Date object, numerical\n * timestamp or ISO 8601 string, defaults to current date if not passed\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * // Remember that JavaScript zero-indexes months!\n * journalize.apdate(new Date(2016, 10, 8));\n * // returns 'Nov. 8, 2016'\n *\n * // The string parser, however, isn't as silly\n * journalize.apdate('2016-11-08');\n * // returns 'Nov. 8, 2016'\n *\n * // Accounts for the non-abbreviated months, too\n * journalize.apdate('2016-06-04');\n * // returns 'July 4, 2016'\n *\n * // Uses the current date if no parameter is passed\n * journalize.apdate();\n * // returns 'July 4, 2016' (pretend it is actually July 4, 2016)\n */\nexport default function apdate(input) {\n  var date = parse(input || new Date());\n\n  var month = apmonth(date);\n  var dayOfMonth = date.getDate();\n  var year = date.getFullYear();\n\n  return month + ' ' + dayOfMonth + ', ' + year;\n}\n","/**\n * Returns true if `value` is null or undefined;\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function isNil(value) {\n  return value == null;\n}\n\n/**\n * Returns true if `value` is a valid string.\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Returns true if `value` is a finite number.\n *\n * Based on: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function _isFinite(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Returns true if `value` is an integer.\n *\n * Based on: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function isInteger(value) {\n  return _isFinite(value) && Math.floor(value) === value;\n}\n\n/**\n * A for-loop version of Array.prototype.find so IE and friends can play.\n *\n * @private\n * @param  {Array} arr\n * @param  {Function} predicate\n * @return {*|undefined}\n * @throws {TypeError} Argument predicate must be a function\n */\nexport function find(arr, predicate) {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate must be a function');\n  }\n\n  for (var i = 0; i < arr.length; i++) {\n    if (predicate(arr[i], i, arr)) {\n      return arr[i];\n    }\n  }\n\n  return undefined;\n}\n","import { isInteger, isNil } from './utils';\n\n/**\n * List of spelled out numbers per AP style.\n * @private\n * @type {Array}\n */\nvar AP_NUMBERS = [\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine'\n];\n\n/**\n * Converts an integer to string representation per AP style rules. If an\n * integer is not one that would be converted, it is returned in its original\n * form.\n *\n * If a non-integer is given, it will be returned in its original form as\n * well.\n *\n * @param  {Number} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.apnumber(8);\n * // returns 'eight'\n *\n * journalize.apnumber(42);\n * // returns 42\n *\n */\nexport default function apnumber(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  var convertedVal = +val;\n\n  // if `convertedVal` is not an integer, return `val`\n  if (!isInteger(convertedVal)) return val;\n\n  // if `convertedVal` is not between 0 and 10, return `val`\n  if (convertedVal <= 0 || convertedVal >= 10) return val;\n\n  return AP_NUMBERS[convertedVal - 1];\n}\n","import { find, isNil, isString } from './utils';\n\n/**\n * Searches a list of objects for a `val` that matches the value of `key_one`.\n * Then, it returns the value of `key_two`. If `reverse` is true, it does the\n * opposite.\n *\n * This is a helper function for other methods that all work similarly.\n *\n * @private\n * @param  {String} val\n * @param  {Boolean} [reverse=false]\n * @param  {Array} list\n * @param  {String} key_one\n * @param  {String} key_two\n * @return {String}\n */\nexport default function lookup(val, reverse, list, keyOne, keyTwo) {\n  // if reverse is not provided, it is set to false\n  reverse = reverse || false;\n\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  // if `val` is not a string, abort and return `val`\n  if (!isString(val)) return val;\n\n  var lookupKey, outputKey;\n\n  // if `reverse` is true, flip the key and value\n  if (reverse) {\n    lookupKey = keyTwo;\n    outputKey = keyOne;\n  } else {\n    lookupKey = keyOne;\n    outputKey = keyTwo;\n  }\n\n  // look for a match in the list\n  var match = find(list, function(el) {\n    return el[lookupKey] === val;\n  });\n\n  // if no match is found, return the original `val`\n  if (!match) return val;\n\n  // get the output value from the `match` object\n  var newVal = match[outputKey];\n\n  // if `newVal` is empty, return the original `val`\n  if (newVal.length === 0 || isNil(newVal)) return val;\n\n  return newVal;\n}\n","/**\n * A list of state names and their AP abbreviations and USPS postal codes.\n *\n * Sources:\n * https://github.com/wireservice/lookup/blob/master/states/ap.csv\n * https://github.com/wireservice/lookup/blob/master/states/usps.csv\n *\n * @private\n * @type {Array}\n */\nexport default [\n  {\n    state: 'Alabama',\n    ap: 'Ala.',\n    usps: 'AL'\n  },\n  {\n    state: 'Alaska',\n    ap: 'Alaska',\n    usps: 'AK'\n  },\n  {\n    state: 'Arizona',\n    ap: 'Ariz.',\n    usps: 'AZ'\n  },\n  {\n    state: 'Arkansas',\n    ap: 'Ark.',\n    usps: 'AR'\n  },\n  {\n    state: 'California',\n    ap: 'Calif.',\n    usps: 'CA'\n  },\n  {\n    state: 'Colorado',\n    ap: 'Colo.',\n    usps: 'CO'\n  },\n  {\n    state: 'Connecticut',\n    ap: 'Conn.',\n    usps: 'CT'\n  },\n  {\n    state: 'Delaware',\n    ap: 'Del.',\n    usps: 'DE'\n  },\n  {\n    state: 'District of Columbia',\n    ap: 'D.C.',\n    usps: 'DC'\n  },\n  {\n    state: 'Florida',\n    ap: 'Fla.',\n    usps: 'FL'\n  },\n  {\n    state: 'Georgia',\n    ap: 'Ga.',\n    usps: 'GA'\n  },\n  {\n    state: 'Hawaii',\n    ap: 'Hawaii',\n    usps: 'HI'\n  },\n  {\n    state: 'Idaho',\n    ap: 'Idaho',\n    usps: 'ID'\n  },\n  {\n    state: 'Illinois',\n    ap: 'Ill.',\n    usps: 'IL'\n  },\n  {\n    state: 'Indiana',\n    ap: 'Ind.',\n    usps: 'IN'\n  },\n  {\n    state: 'Iowa',\n    ap: 'Iowa',\n    usps: 'IA'\n  },\n  {\n    state: 'Kansas',\n    ap: 'Kan.',\n    usps: 'KS'\n  },\n  {\n    state: 'Kentucky',\n    ap: 'Ky.',\n    usps: 'KY'\n  },\n  {\n    state: 'Louisiana',\n    ap: 'La.',\n    usps: 'LA'\n  },\n  {\n    state: 'Maine',\n    ap: 'Maine',\n    usps: 'ME'\n  },\n  {\n    state: 'Maryland',\n    ap: 'Md.',\n    usps: 'MD'\n  },\n  {\n    state: 'Massachusetts',\n    ap: 'Mass.',\n    usps: 'MA'\n  },\n  {\n    state: 'Michigan',\n    ap: 'Mich.',\n    usps: 'MI'\n  },\n  {\n    state: 'Minnesota',\n    ap: 'Minn.',\n    usps: 'MN'\n  },\n  {\n    state: 'Mississippi',\n    ap: 'Miss.',\n    usps: 'MS'\n  },\n  {\n    state: 'Missouri',\n    ap: 'Mo.',\n    usps: 'MO'\n  },\n  {\n    state: 'Montana',\n    ap: 'Mont.',\n    usps: 'MT'\n  },\n  {\n    state: 'Nebraska',\n    ap: 'Neb.',\n    usps: 'NE'\n  },\n  {\n    state: 'Nevada',\n    ap: 'Nev.',\n    usps: 'NV'\n  },\n  {\n    state: 'New Hampshire',\n    ap: 'N.H.',\n    usps: 'NH'\n  },\n  {\n    state: 'New Jersey',\n    ap: 'N.J.',\n    usps: 'NJ'\n  },\n  {\n    state: 'New Mexico',\n    ap: 'N.M.',\n    usps: 'NM'\n  },\n  {\n    state: 'New York',\n    ap: 'N.Y.',\n    usps: 'NY'\n  },\n  {\n    state: 'North Carolina',\n    ap: 'N.C.',\n    usps: 'NC'\n  },\n  {\n    state: 'North Dakota',\n    ap: 'N.D.',\n    usps: 'ND'\n  },\n  {\n    state: 'Ohio',\n    ap: 'Ohio',\n    usps: 'OH'\n  },\n  {\n    state: 'Oklahoma',\n    ap: 'Okla.',\n    usps: 'OK'\n  },\n  {\n    state: 'Oregon',\n    ap: 'Ore.',\n    usps: 'OR'\n  },\n  {\n    state: 'Pennsylvania',\n    ap: 'Pa.',\n    usps: 'PA'\n  },\n  {\n    state: 'Rhode Island',\n    ap: 'R.I.',\n    usps: 'RI'\n  },\n  {\n    state: 'South Carolina',\n    ap: 'S.C.',\n    usps: 'SC'\n  },\n  {\n    state: 'South Dakota',\n    ap: 'S.D.',\n    usps: 'SD'\n  },\n  {\n    state: 'Tennessee',\n    ap: 'Tenn.',\n    usps: 'TN'\n  },\n  {\n    state: 'Texas',\n    ap: 'Texas',\n    usps: 'TX'\n  },\n  {\n    state: 'Utah',\n    ap: 'Utah',\n    usps: 'UT'\n  },\n  {\n    state: 'Vermont',\n    ap: 'Vt.',\n    usps: 'VT'\n  },\n  {\n    state: 'Virginia',\n    ap: 'Va.',\n    usps: 'VA'\n  },\n  {\n    state: 'Washington',\n    ap: 'Wash.',\n    usps: 'WA'\n  },\n  {\n    state: 'West Virginia',\n    ap: 'W.Va.',\n    usps: 'WV'\n  },\n  {\n    state: 'Wisconsin',\n    ap: 'Wis.',\n    usps: 'WI'\n  },\n  {\n    state: 'Wyoming',\n    ap: 'Wyo.',\n    usps: 'WY'\n  },\n  {\n    state: 'American Samoa',\n    ap: '',\n    usps: 'AS'\n  },\n  {\n    state: 'Guam',\n    ap: '',\n    usps: 'GU'\n  },\n  {\n    state: 'Northern Mariana Islands',\n    ap: '',\n    usps: 'MP'\n  },\n  {\n    state: 'Puerto Rico',\n    ap: '',\n    usps: 'PR'\n  },\n  {\n    state: 'U.S. Minor Outlying Islands',\n    ap: '',\n    usps: 'UM'\n  },\n  {\n    state: 'U.S. Virgin Islands',\n    ap: '',\n    usps: 'VI'\n  }\n];\n","import lookup from './lookup';\n\nimport AP_STATES from './data/states';\n\n/**\n * Converts state names into AP abbreviations, and back. If the supplied\n * string has no match, or if there is a match and the lookup is empty, the\n * original value is returned. If the value is not a string, the original will\n * also be returned.\n *\n * If `reverse` is true, `apstate` will convert an abbreviation back to a full\n * string.\n *\n * @param  {String} val\n * @param  {Boolean} [reverse=false]\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.apstate('Arizona');\n * // returns 'Ariz.'\n *\n * journalize.apstate('District of Columbia');\n * // returns 'D.C.'\n *\n * journalize.apstate('Texas');\n * // returns 'Texas'\n *\n * journalize.apstate('Ontario');\n * // returns 'Ontario'\n *\n * journalize.apstate('D.C.', true);\n * // returns 'District of Columbia'\n */\nexport default function apstate(val, reverse) {\n  return lookup(val, reverse, AP_STATES, 'state', 'ap');\n}\n","import parse from 'date-fns/parse';\n\n/**\n * Returns an AP-formatted time string that corresponds with the supplied\n * Date, timestamp or datetime string. Relies on date-fns/parse to smooth over\n * ISO 8601 parsing inconsistencies. If an `input` is not passed, it will use\n * the result of `new Date();`.\n *\n * @param  {Date|Number|String} [input] JavaScript Date object, numerical\n * timestamp or ISO 8601 string, defaults to current date if not passed\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * // Bright and early\n * journalize.aptime(new Date(2016, 10, 8, 6, 30));\n * // returns '6:30 a.m.'\n *\n * // It can handle `p.m.` too\n * journalize.aptime(new Date(2016, 10, 8, 16, 30));\n * // returns '4:30 p.m.'\n *\n * // Much better to write and pass around in ISO 8601\n * journalize.aptime('2016-11-08T16:30');\n * // returns '4:30 p.m.'\n *\n * // Minutes are left off if zero\n * journalize.aptime('2016-11-08T16:00');\n * // returns '4 p.m.'\n *\n * // Also understands midnight...\n * journalize.aptime('2016-11-08T00:00');\n * // returns 'midnight'\n *\n * // ...and noon\n * journalize.aptime('2016-11-08T12:00');\n * // returns 'noon'\n *\n * // Uses the current time if no parameter is passed\n * journalize.aptime();\n * // returns '6:45 p.m.' (pretend it is actually 6:45 p.m. right now)\n *\n */\nexport default function aptime(input) {\n  var date = parse(input || new Date());\n\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n\n  var minutesAreZero = minutes === 0;\n\n  if (minutesAreZero) {\n    if (hours === 0) return 'midnight';\n    if (hours === 12) return 'noon';\n  }\n\n  var period, hour;\n\n  if (hours < 12) {\n    period = 'a.m.';\n    hour = hours;\n  } else {\n    period = 'p.m.';\n    hour = hours - 12;\n  }\n\n  if (minutesAreZero) {\n    return hour + ' ' + period;\n  }\n\n  var minute = minutes < 10 ? '0' + minutes : minutes;\n  return hour + ':' + minute + ' ' + period;\n}\n","import { _isFinite, isNil } from './utils';\n\n/**\n * Converts a number to include commas, if necessary.\n *\n * Source: http://stackoverflow.com/a/2901298\n *\n * @private\n * @param  {Number|String} n\n * @return {String}\n */\nfunction numberWithCommas(n) {\n  var parts = n.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n}\n\n/**\n * Alters a string or number to include commas. If `val` is undefined or null,\n * an empty string is returned.\n *\n * @param  {Number|String} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.intcomma(10311);\n * // returns '10,311'\n *\n * journalize.intcomma('1234567.1234567');\n * // returns '1,234,567.1234567'\n */\nexport default function intcomma(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  var convertedVal = +val;\n\n  // if `convertedVal` is not a number, don't waste time converting it\n  if (!_isFinite(convertedVal)) return val;\n\n  return numberWithCommas(convertedVal);\n}\n","import { isInteger, isNil } from './utils';\n\n/**\n * Array of suffixes to be used by intword.\n * @private\n * @type {Array}\n */\nvar SUFFIXES = [\n  'million',\n  'billion',\n  'trillion',\n  'quadrillion',\n  'quintillion',\n  'sextillion',\n  'septillion',\n  'octillion',\n  'nonillion',\n  'decillion'\n];\n\n/**\n * Returns the number of digits found in a number. Accounts for exponents, too.\n *\n * @private\n * @param  {Number} n\n * @return {Number}\n */\nfunction getLengthOfNumber(n) {\n  return Math.ceil(Math.log(n + 1) / Math.LN10);\n}\n\n/**\n * Converts a large integer into a string representation. Only makes sense for\n * numbers at least 1 million or more.\n *\n * @param  {Number} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.intword(1000000);\n * // returns '1 million'\n *\n * journalize.intword(6500000000000);\n * // returns '6.5 trillion'\n */\nexport default function intword(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  var convertedVal = +val;\n\n  // if `convertedVal` is not an integer, return `val`\n  if (!isInteger(convertedVal)) return val;\n\n  // if `convertedVal` is less than 1 million, no conversion is needed\n  if (convertedVal < 1000000) return val;\n\n  // get the number of digits in the number, and substract remainder to get\n  // exponent value\n  var numDigits = getLengthOfNumber(convertedVal) - 1;\n  var exponent = numDigits - numDigits % 3;\n\n  // calculate the rounded version of `convertedVal`\n  var newVal = convertedVal / Math.pow(10, exponent);\n  newVal = Math.round(newVal * 10) / 10;\n\n  return newVal + ' ' + SUFFIXES[Math.floor(exponent / 3) - 2];\n}\n","import { isInteger, isNil } from './utils';\n\n/**\n * A list of suffixes for conversions.\n * @private\n * @type {Array}\n */\nvar SUFFIXES = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];\n\n/**\n * A list of funky English ordinals.\n * @private\n * @type {Array}\n */\nvar ENGLISH_ORDINAL_EXCEPTIONS = [11, 12, 13];\n\n/**\n * Converts an integer into its ordinal form. Handles the special cases of 11,\n * 12 and 13, too. If a non-integer is submitted, it will be returned in its\n * original form.\n *\n * @param  {Number} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.ordinal(5);\n * // returns '5th'\n *\n * journalize.ordinal(13);\n * // returns '13th'\n *\n * journalize.ordinal(103);\n * // returns '103rd'\n */\nexport default function ordinal(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  var convertedVal = +val;\n\n  // if `convertedVal` is not an integer, return `val`\n  if (!isInteger(convertedVal)) return val;\n\n  // if `convertedVal` is 11, 12 or 13, English gets weird\n  if (ENGLISH_ORDINAL_EXCEPTIONS.indexOf(convertedVal % 100) > -1)\n    return convertedVal + SUFFIXES[0];\n\n  return convertedVal + SUFFIXES[convertedVal % 10];\n}\n","import lookup from './lookup';\n\nimport AP_STATES from './data/states';\n\n/**\n * Converts state and U.S. territory names into USPS postal codes, and back. If\n * the supplied string has no match, or if there is a match and the lookup is\n * empty, the original value is returned. If the value is not a string, the\n * original will also be returned.\n *\n * If `reverse` is true, `postal` will convert a postal code back to a full\n * string.\n *\n * @param  {String} val\n * @param  {Boolean} [reverse=false]\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.postal('Arizona');\n * // returns 'AZ'\n *\n * journalize.postal('District of Columbia');\n * // returns 'DC'\n *\n * journalize.postal('Texas');\n * // returns 'TX'\n *\n * journalize.postal('Ontario');\n * // returns 'Ontario'\n *\n * journalize.postal('DC', true);\n * // returns 'District of Columbia'\n */\nexport default function postal(val, reverse) {\n  return lookup(val, reverse, AP_STATES, 'state', 'usps');\n}\n"],"names":["argument","Date","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","parseTokenDateTimeDelimeter","parseTokenPlainTime","parseTokenYY","parseTokensYYY","parseTokenYYYY","parseTokensYYYYY","parseTokenMM","parseTokenDDD","parseTokenMMDD","parseTokenWww","parseTokenWwwD","parseTokenHH","parseTokenHHMM","parseTokenHHMMSS","parseTokenTimezone","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","dayOfISOYear","isoYear","week","day","date","setUTCFullYear","diff","getUTCDay","setUTCDate","getUTCDate","dirtyOptions","isDate","getTime","additionalDigits","Number","dateStrings","dateString","timeString","array","split","test","token","exec","time","replace","timezone","splitDateString","parseYearResult","parseTokenYYY","parseTokenYYYYY","yearString","year","parseInt","restDateString","slice","length","centuryString","parseYear","month","dayOfYear","dayOfWeek","parseDate","offset","timestamp","hours","minutes","parseFloat","seconds","parseTime","timezoneString","absoluteOffset","getTimezoneOffset","AP_MONTHS","0","1","2","3","4","5","6","7","8","9","10","11","apmonth","input","parse","getMonth","apdate","getDate","getFullYear","isNil","value","_isFinite","isFinite","isInteger","Math","floor","AP_NUMBERS","apnumber","val","convertedVal","lookup","reverse","list","keyOne","keyTwo","lookupKey","outputKey","match","arr","predicate","TypeError","i","find","el","newVal","state","ap","usps","apstate","AP_STATES","aptime","period","hour","getHours","getMinutes","minutesAreZero","intcomma","parts","toString","join","SUFFIXES","intword","numDigits","ceil","log","LN10","exponent","pow","round","ENGLISH_ORDINAL_EXCEPTIONS","ordinal","indexOf","postal"],"mappings":"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"}