{"version":3,"file":"journalize.js","sources":["../src/apmonth.js","../src/utils.js","../src/apnumber.js","../src/lookup.js","../src/data/states.js","../src/intword.js","../src/ordinal.js","../src/apdate.js","../src/apstate.js","../src/aptime.js","../src/intcomma.js","../src/postal.js"],"sourcesContent":["/**\n * Map of AP month abbreviations. Note that they are zero-indexed due to\n * JavaScript's life choices. Exported for testing purposes.\n *\n * @private\n * @type {object}\n */\nexport const AP_MONTHS = {\n  0: 'Jan.',\n  1: 'Feb.',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'Aug.',\n  8: 'Sept.',\n  9: 'Oct.',\n  10: 'Nov.',\n  11: 'Dec.',\n};\n\n/**\n * Returns an AP-formatted month string that corresponds with the supplied\n * Date. If an `input` is not passed, it will use the result of `new Date();`.\n *\n * @param  {Date} [date] JavaScript Date object, defaults to current date if\n *                       not passed\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * // Remember that JavaScript zero-indexes months!\n * journalize.apmonth(new Date(2016, 10, 8));\n * // returns 'Nov.'\n *\n * // Uses the current date if no parameter is passed\n * journalize.apmonth();\n * // returns 'July' (pretend it is actually July)\n */\nexport default function apmonth(date = new Date()) {\n  return AP_MONTHS[date.getMonth()];\n}\n","/**\n * Returns true if `value` is null or undefined;\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function isNil(value) {\n  return value == null;\n}\n\n/**\n * Returns true if `value` is a valid string.\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Returns true if `value` is a finite number.\n *\n * Based on: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function _isFinite(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Returns true if `value` is an integer.\n *\n * Based on: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n *\n * @private\n * @param  {*}  value\n * @return {Boolean}\n */\nexport function isInteger(value) {\n  return _isFinite(value) && Math.floor(value) === value;\n}\n\n/**\n * A for-loop version of Array.prototype.find so IE and friends can play.\n *\n * @private\n * @param  {Array} arr\n * @param  {Function} predicate\n * @return {*|undefined}\n * @throws {TypeError} Argument predicate must be a function\n */\nexport function find(arr, predicate) {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate must be a function');\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    if (predicate(arr[i], i, arr)) {\n      return arr[i];\n    }\n  }\n\n  return undefined;\n}\n","import { isInteger, isNil } from './utils';\n\n/**\n * List of spelled out numbers per AP style.\n * @private\n * @type {Array}\n */\nconst AP_NUMBERS = [\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n];\n\n/**\n * Converts an integer to string representation per AP style rules. If an\n * integer is not one that would be converted, it is returned in its original\n * form.\n *\n * If a non-integer is given, it will be returned in its original form as\n * well.\n *\n * @param  {Number} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.apnumber(8);\n * // returns 'eight'\n *\n * journalize.apnumber(42);\n * // returns 42\n *\n */\nexport default function apnumber(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  const convertedVal = +val;\n\n  // if `convertedVal` is not an integer, return `val`\n  if (!isInteger(convertedVal)) return val;\n\n  // if `convertedVal` is not between 0 and 10, return `val`\n  if (convertedVal <= 0 || convertedVal >= 10) return val;\n\n  return AP_NUMBERS[convertedVal - 1];\n}\n","import { find, isNil, isString } from './utils';\n\n/**\n * Searches a list of objects for a `val` that matches the value of `key_one`.\n * Then, it returns the value of `key_two`. If `reverse` is true, it does the\n * opposite.\n *\n * This is a helper function for other methods that all work similarly.\n *\n * @private\n * @param  {String} val\n * @param  {Boolean} [reverse=false]\n * @param  {Array} list\n * @param  {String} key_one\n * @param  {String} key_two\n * @return {String}\n */\nexport default function lookup(val, reverse, list, keyOne, keyTwo) {\n  // if reverse is not provided, it is set to false\n  reverse = reverse || false;\n\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  // if `val` is not a string, abort and return `val`\n  if (!isString(val)) return val;\n\n  let lookupKey, outputKey;\n\n  // if `reverse` is true, flip the key and value\n  if (reverse) {\n    lookupKey = keyTwo;\n    outputKey = keyOne;\n  } else {\n    lookupKey = keyOne;\n    outputKey = keyTwo;\n  }\n\n  // look for a match in the list\n  const match = find(list, function(el) {\n    return el[lookupKey] === val;\n  });\n\n  // if no match is found, return the original `val`\n  if (!match) return val;\n\n  // get the output value from the `match` object\n  const newVal = match[outputKey];\n\n  // if `newVal` is empty, return the original `val`\n  if (newVal.length === 0 || isNil(newVal)) return val;\n\n  return newVal;\n}\n","/**\n * A list of state names and their AP abbreviations and USPS postal codes.\n *\n * Sources:\n * https://github.com/wireservice/lookup/blob/master/states/ap.csv\n * https://github.com/wireservice/lookup/blob/master/states/usps.csv\n *\n * @private\n * @type {Array}\n */\nexport default [\n  {\n    state: 'Alabama',\n    ap: 'Ala.',\n    usps: 'AL',\n  },\n  {\n    state: 'Alaska',\n    ap: 'Alaska',\n    usps: 'AK',\n  },\n  {\n    state: 'Arizona',\n    ap: 'Ariz.',\n    usps: 'AZ',\n  },\n  {\n    state: 'Arkansas',\n    ap: 'Ark.',\n    usps: 'AR',\n  },\n  {\n    state: 'California',\n    ap: 'Calif.',\n    usps: 'CA',\n  },\n  {\n    state: 'Colorado',\n    ap: 'Colo.',\n    usps: 'CO',\n  },\n  {\n    state: 'Connecticut',\n    ap: 'Conn.',\n    usps: 'CT',\n  },\n  {\n    state: 'Delaware',\n    ap: 'Del.',\n    usps: 'DE',\n  },\n  {\n    state: 'District of Columbia',\n    ap: 'D.C.',\n    usps: 'DC',\n  },\n  {\n    state: 'Florida',\n    ap: 'Fla.',\n    usps: 'FL',\n  },\n  {\n    state: 'Georgia',\n    ap: 'Ga.',\n    usps: 'GA',\n  },\n  {\n    state: 'Hawaii',\n    ap: 'Hawaii',\n    usps: 'HI',\n  },\n  {\n    state: 'Idaho',\n    ap: 'Idaho',\n    usps: 'ID',\n  },\n  {\n    state: 'Illinois',\n    ap: 'Ill.',\n    usps: 'IL',\n  },\n  {\n    state: 'Indiana',\n    ap: 'Ind.',\n    usps: 'IN',\n  },\n  {\n    state: 'Iowa',\n    ap: 'Iowa',\n    usps: 'IA',\n  },\n  {\n    state: 'Kansas',\n    ap: 'Kan.',\n    usps: 'KS',\n  },\n  {\n    state: 'Kentucky',\n    ap: 'Ky.',\n    usps: 'KY',\n  },\n  {\n    state: 'Louisiana',\n    ap: 'La.',\n    usps: 'LA',\n  },\n  {\n    state: 'Maine',\n    ap: 'Maine',\n    usps: 'ME',\n  },\n  {\n    state: 'Maryland',\n    ap: 'Md.',\n    usps: 'MD',\n  },\n  {\n    state: 'Massachusetts',\n    ap: 'Mass.',\n    usps: 'MA',\n  },\n  {\n    state: 'Michigan',\n    ap: 'Mich.',\n    usps: 'MI',\n  },\n  {\n    state: 'Minnesota',\n    ap: 'Minn.',\n    usps: 'MN',\n  },\n  {\n    state: 'Mississippi',\n    ap: 'Miss.',\n    usps: 'MS',\n  },\n  {\n    state: 'Missouri',\n    ap: 'Mo.',\n    usps: 'MO',\n  },\n  {\n    state: 'Montana',\n    ap: 'Mont.',\n    usps: 'MT',\n  },\n  {\n    state: 'Nebraska',\n    ap: 'Neb.',\n    usps: 'NE',\n  },\n  {\n    state: 'Nevada',\n    ap: 'Nev.',\n    usps: 'NV',\n  },\n  {\n    state: 'New Hampshire',\n    ap: 'N.H.',\n    usps: 'NH',\n  },\n  {\n    state: 'New Jersey',\n    ap: 'N.J.',\n    usps: 'NJ',\n  },\n  {\n    state: 'New Mexico',\n    ap: 'N.M.',\n    usps: 'NM',\n  },\n  {\n    state: 'New York',\n    ap: 'N.Y.',\n    usps: 'NY',\n  },\n  {\n    state: 'North Carolina',\n    ap: 'N.C.',\n    usps: 'NC',\n  },\n  {\n    state: 'North Dakota',\n    ap: 'N.D.',\n    usps: 'ND',\n  },\n  {\n    state: 'Ohio',\n    ap: 'Ohio',\n    usps: 'OH',\n  },\n  {\n    state: 'Oklahoma',\n    ap: 'Okla.',\n    usps: 'OK',\n  },\n  {\n    state: 'Oregon',\n    ap: 'Ore.',\n    usps: 'OR',\n  },\n  {\n    state: 'Pennsylvania',\n    ap: 'Pa.',\n    usps: 'PA',\n  },\n  {\n    state: 'Rhode Island',\n    ap: 'R.I.',\n    usps: 'RI',\n  },\n  {\n    state: 'South Carolina',\n    ap: 'S.C.',\n    usps: 'SC',\n  },\n  {\n    state: 'South Dakota',\n    ap: 'S.D.',\n    usps: 'SD',\n  },\n  {\n    state: 'Tennessee',\n    ap: 'Tenn.',\n    usps: 'TN',\n  },\n  {\n    state: 'Texas',\n    ap: 'Texas',\n    usps: 'TX',\n  },\n  {\n    state: 'Utah',\n    ap: 'Utah',\n    usps: 'UT',\n  },\n  {\n    state: 'Vermont',\n    ap: 'Vt.',\n    usps: 'VT',\n  },\n  {\n    state: 'Virginia',\n    ap: 'Va.',\n    usps: 'VA',\n  },\n  {\n    state: 'Washington',\n    ap: 'Wash.',\n    usps: 'WA',\n  },\n  {\n    state: 'West Virginia',\n    ap: 'W.Va.',\n    usps: 'WV',\n  },\n  {\n    state: 'Wisconsin',\n    ap: 'Wis.',\n    usps: 'WI',\n  },\n  {\n    state: 'Wyoming',\n    ap: 'Wyo.',\n    usps: 'WY',\n  },\n  {\n    state: 'American Samoa',\n    ap: '',\n    usps: 'AS',\n  },\n  {\n    state: 'Guam',\n    ap: '',\n    usps: 'GU',\n  },\n  {\n    state: 'Northern Mariana Islands',\n    ap: '',\n    usps: 'MP',\n  },\n  {\n    state: 'Puerto Rico',\n    ap: '',\n    usps: 'PR',\n  },\n  {\n    state: 'U.S. Minor Outlying Islands',\n    ap: '',\n    usps: 'UM',\n  },\n  {\n    state: 'U.S. Virgin Islands',\n    ap: '',\n    usps: 'VI',\n  },\n];\n","import { isInteger, isNil } from './utils';\n\n/**\n * Array of suffixes to be used by intword.\n * @private\n * @type {Array}\n */\nconst SUFFIXES = [\n  'million',\n  'billion',\n  'trillion',\n  'quadrillion',\n  'quintillion',\n  'sextillion',\n  'septillion',\n  'octillion',\n  'nonillion',\n  'decillion',\n];\n\n/**\n * Returns the number of digits found in a number. Accounts for exponents, too.\n *\n * @private\n * @param  {Number} n\n * @return {Number}\n */\nfunction getLengthOfNumber(n) {\n  return Math.ceil(Math.log(n + 1) / Math.LN10);\n}\n\n/**\n * Converts a large integer into a string representation. Only makes sense for\n * numbers at least 1 million or more.\n *\n * @param  {Number} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.intword(1000000);\n * // returns '1 million'\n *\n * journalize.intword(6500000000000);\n * // returns '6.5 trillion'\n */\nexport default function intword(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  const convertedVal = +val;\n\n  // if `convertedVal` is not an integer, return `val`\n  if (!isInteger(convertedVal)) return val;\n\n  // if `convertedVal` is less than 1 million, no conversion is needed\n  if (convertedVal < 1000000) return val;\n\n  // get the number of digits in the number, and substract remainder to get\n  // exponent value\n  const numDigits = getLengthOfNumber(convertedVal) - 1;\n  const exponent = numDigits - numDigits % 3;\n\n  // calculate the rounded version of `convertedVal`\n  let newVal = convertedVal / Math.pow(10, exponent);\n  newVal = Math.round(newVal * 10) / 10;\n\n  return newVal + ' ' + SUFFIXES[Math.floor(exponent / 3) - 2];\n}\n","import { isInteger, isNil } from './utils';\n\n/**\n * A list of suffixes for conversions.\n * @private\n * @type {Array}\n */\nconst SUFFIXES = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];\n\n/**\n * A list of funky English ordinals.\n * @private\n * @type {Array}\n */\nconst ENGLISH_ORDINAL_EXCEPTIONS = [11, 12, 13];\n\n/**\n * Converts an integer into its ordinal form. Handles the special cases of 11,\n * 12 and 13, too. If a non-integer is submitted, it will be returned in its\n * original form.\n *\n * @param  {Number} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.ordinal(5);\n * // returns '5th'\n *\n * journalize.ordinal(13);\n * // returns '13th'\n *\n * journalize.ordinal(103);\n * // returns '103rd'\n */\nexport default function ordinal(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  const convertedVal = +val;\n\n  // if `convertedVal` is not an integer, return `val`\n  if (!isInteger(convertedVal)) return val;\n\n  // if `convertedVal` is 11, 12 or 13, English gets weird\n  if (ENGLISH_ORDINAL_EXCEPTIONS.indexOf(convertedVal % 100) > -1)\n    return convertedVal + SUFFIXES[0];\n\n  return convertedVal + SUFFIXES[convertedVal % 10];\n}\n","import apmonth from './apmonth';\n\n/**\n * Returns an AP-formatted date string that corresponds with the supplied\n * Date. If an `input` is not passed, it will use the result of `new Date();`.\n *\n * @param  {Date} [date] JavaScript Date object, defaults to current date if\n *                       not passed\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * // Remember that JavaScript zero-indexes months!\n * journalize.apdate(new Date(2016, 10, 8));\n * // returns 'Nov. 8, 2016'\n *\n * // Uses the current date if no parameter is passed\n * journalize.apdate();\n * // returns 'July 4, 2016' (pretend it is actually July 4, 2016)\n */\nexport default function apdate(date = new Date()) {\n  const month = apmonth(date);\n  const dayOfMonth = date.getDate();\n  const year = date.getFullYear();\n\n  return `${month} ${dayOfMonth}, ${year}`;\n}\n","import lookup from './lookup';\n\nimport AP_STATES from './data/states';\n\n/**\n * Converts state names into AP abbreviations, and back. If the supplied\n * string has no match, or if there is a match and the lookup is empty, the\n * original value is returned. If the value is not a string, the original will\n * also be returned.\n *\n * If `reverse` is true, `apstate` will convert an abbreviation back to a full\n * string.\n *\n * @param  {String} val\n * @param  {Boolean} [reverse=false]\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.apstate('Arizona');\n * // returns 'Ariz.'\n *\n * journalize.apstate('District of Columbia');\n * // returns 'D.C.'\n *\n * journalize.apstate('Texas');\n * // returns 'Texas'\n *\n * journalize.apstate('Ontario');\n * // returns 'Ontario'\n *\n * journalize.apstate('D.C.', true);\n * // returns 'District of Columbia'\n */\nexport default function apstate(val, reverse) {\n  return lookup(val, reverse, AP_STATES, 'state', 'ap');\n}\n","/**\n * Returns an AP-formatted time string that corresponds with the supplied\n * Date. If an `input` is not passed, it will use the result of `new Date();`.\n *\n * @param  {Date} [date] JavaScript Date object, defaults to current date if\n *                       not passed\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * // Bright and early\n * journalize.aptime(new Date(2016, 10, 8, 6, 30));\n * // returns '6:30 a.m.'\n *\n * // It can handle `p.m.` too\n * journalize.aptime(new Date(2016, 10, 8, 16, 30));\n * // returns '4:30 p.m.'\n *\n * // Uses the current time if no parameter is passed\n * journalize.aptime();\n * // returns '6:45 p.m.' (pretend it is actually 6:45 p.m. right now)\n */\nexport default function aptime(date = new Date()) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n\n  var minutesAreZero = minutes === 0;\n\n  if (minutesAreZero) {\n    if (hours === 0) return 'midnight';\n    if (hours === 12) return 'noon';\n  }\n\n  var period, hour;\n\n  if (hours < 12) {\n    period = 'a.m.';\n    hour = hours;\n  } else {\n    period = 'p.m.';\n    hour = hours - 12;\n  }\n\n  if (minutesAreZero) {\n    return hour + ' ' + period;\n  }\n\n  var minute = minutes < 10 ? '0' + minutes : minutes;\n  return hour + ':' + minute + ' ' + period;\n}\n","import { _isFinite, isNil } from './utils';\n\n/**\n * Converts a number to include commas, if necessary.\n *\n * Source: http://stackoverflow.com/a/2901298\n *\n * @private\n * @param  {Number|String} n\n * @return {String}\n */\nfunction numberWithCommas(n) {\n  const parts = n.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n}\n\n/**\n * Alters a string or number to include commas. If `val` is undefined or null,\n * an empty string is returned.\n *\n * @param  {Number|String} val\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.intcomma(10311);\n * // returns '10,311'\n *\n * journalize.intcomma('1234567.1234567');\n * // returns '1,234,567.1234567'\n */\nexport default function intcomma(val) {\n  // if `val` is undefined or null, return an empty string\n  if (isNil(val)) return '';\n\n  const convertedVal = +val;\n\n  // if `convertedVal` is not a number, don't waste time converting it\n  if (!_isFinite(convertedVal)) return val;\n\n  return numberWithCommas(convertedVal);\n}\n","import lookup from './lookup';\n\nimport AP_STATES from './data/states';\n\n/**\n * Converts state and U.S. territory names into USPS postal codes, and back. If\n * the supplied string has no match, or if there is a match and the lookup is\n * empty, the original value is returned. If the value is not a string, the\n * original will also be returned.\n *\n * If `reverse` is true, `postal` will convert a postal code back to a full\n * string.\n *\n * @param  {String} val\n * @param  {Boolean} [reverse=false]\n * @return {String}\n * @example\n *\n * var journalize = require('journalize');\n *\n * journalize.postal('Arizona');\n * // returns 'AZ'\n *\n * journalize.postal('District of Columbia');\n * // returns 'DC'\n *\n * journalize.postal('Texas');\n * // returns 'TX'\n *\n * journalize.postal('Ontario');\n * // returns 'Ontario'\n *\n * journalize.postal('DC', true);\n * // returns 'District of Columbia'\n */\nexport default function postal(val, reverse) {\n  return lookup(val, reverse, AP_STATES, 'state', 'usps');\n}\n"],"names":["const","AP_MONTHS","0","1","2","3","4","5","6","7","8","9","10","11","apmonth","date","Date","getMonth","isNil","value","_isFinite","isFinite","isInteger","Math","floor","AP_NUMBERS","lookup","val","reverse","list","keyOne","keyTwo","lookupKey","outputKey","match","arr","predicate","TypeError","let","i","length","find","el","newVal","state","ap","usps","SUFFIXES","ENGLISH_ORDINAL_EXCEPTIONS","getDate","getFullYear","convertedVal","AP_STATES","period","hour","hours","getHours","minutes","getMinutes","minutesAreZero","parts","toString","split","replace","join","numDigits","ceil","log","LN10","exponent","pow","round","indexOf"],"mappings":"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"}